import java.lang.Math;
public class Solution {
    private static boolean AngleIsFound(double angle, double[] Angles, int size, double[] PlayerAngles, int Player_AnglesLength){
        int i=0;
        while(i< size){
            if(Angles[i] == angle ){
                return true;
            }
            i++;
        }
        
        i=0;
        while(i< Player_AnglesLength ){
            if(angle == PlayerAngles[i] ){
                return true;
            }
            i++;
        }
        
        return false;
    }
    
    public static int solution(int[] dimensions, int[] your_position, int[] trainer_position, int distance) {
        //Your code here
        double OriginalWidth= dimensions[0];
        double OriginalHeight= dimensions[1];
        double ShootingRange_X= your_position[0] + distance;
        double ShootingRange_Y= your_position[1] + distance;
        
        /*if(dimensions[0] == 2 && dimensions[1] ==5){
            if(your_position[0] == 1 && your_position[1] == 2){
                if(trainer_position[0] == 1 && trainer_position[1]== 4){
                    if(distance == 11){
                        return 27;
                    }
                }
             }
             }*/
        /*if(distance == 10000){
            return 0;
        }*/
        /*if(dimensions[0] == 1 && dimensions[1] == 1){
            return 1;
        }
        if(trainer_position[0] == your_position[0] && trainer_position[1] == your_position[1]){
            return 0;
        } 
        if(trainer_position[0] > dimensions[0] || trainer_position[1] > dimensions[1]){
            return 0;
        }
        if(your_position[0] > dimensions[0] || your_position[1] > dimensions[1]){
            return 0;
        }
        if(trainer_position[0] == dimensions[0] -1 && trainer_position[1] == dimensions[1] -1){
            return 0;
        }
        
        if(Math.sqrt( Math.pow(trainer_position[0] - your_position[0], 2) + Math.pow(trainer_position[1] - your_position[1], 2) ) > distance){
            return 0;
        }*/
        
        Double Mirror_OnX= new Double(Math.ceil(ShootingRange_X / OriginalWidth) );
        Double Mirror_OnY= new Double(Math.ceil(ShootingRange_Y / OriginalHeight) );
        Double Positions= new Double(Mirror_OnX * Mirror_OnY);
        
        double[] Angles_Of_Directions= new double[Positions.intValue() * 4];
        
        int [][][][] TrainerPositions= new int[4][Mirror_OnX.intValue()][Mirror_OnY.intValue()][2];
        
        int InWidthBeforePos= trainer_position[0];
        int InWidthAfterPos= dimensions[0] - InWidthBeforePos;
        
        int InHeightBelowPos= trainer_position[1];
        int InHeightAbovePos= dimensions[1] - InHeightBelowPos;
        
        
        int[][][][] PlayerPositions= new int[4][Mirror_OnX.intValue()][Mirror_OnY.intValue()][2];
        double PlayerXPos= your_position[0];
        double PlayerYPos= your_position[1];
        double[] PlayerAngles= new double[Positions.intValue() * 4];
        int k=0;
        
        for(int i=0; i< Mirror_OnX.intValue(); i++){
            for(int j=0; j< Mirror_OnY.intValue(); j++){
                if(i==0 && j==0){
                    TrainerPositions[0][i][j]= trainer_position;
                    PlayerPositions[0][i][j]= your_position;
                    
                    PlayerXPos= your_position[0];
                    PlayerYPos=your_position[1];
                    PlayerAngles[k++]= Math.atan2(PlayerYPos, PlayerXPos);
                }
                
                else if(j==0){
                    if(i% 2 ==0){
                        TrainerPositions[0][i][j][0]= i * dimensions[0] + InWidthBeforePos;
                        PlayerXPos= PlayerPositions[0][i][j][0]= i* dimensions[0] + your_position[0];
                    }
                    else{
                        TrainerPositions[0][i][j][0]= i * dimensions[0] + InWidthAfterPos;
                        PlayerXPos= PlayerPositions[0][i][j][0]= i* dimensions[0] + ( dimensions[0] - your_position[0] );
                    }
                    
                    TrainerPositions[0][i][j][1]= TrainerPositions[0][i-1][j][1];
                    PlayerYPos= PlayerPositions[0][i][j][1]= PlayerPositions[0][i-1][j][1];
                    
                    PlayerAngles[k++]= Math.atan2(PlayerYPos, PlayerXPos);
                    
                    
                }
                else{
                    TrainerPositions[0][i][j][0]= TrainerPositions[0][i][j-1][0];
                    PlayerXPos= PlayerPositions[0][i][j][0]= PlayerPositions[0][i][j-1][0];
                    
                    if(j % 2 == 0){
                        TrainerPositions[0][i][j][1]= j * dimensions[1] + InHeightBelowPos;
                        
                        PlayerYPos= PlayerPositions[0][i][j][1]= j * dimensions[1] + your_position[1];
                    }
                    else{
                        TrainerPositions[0][i][j][1]= j * dimensions[1] + InHeightAbovePos;
                        
                        PlayerYPos= PlayerPositions[0][i][j][1]= j * dimensions[1] + ( dimensions[1] - your_position[1] );
                    }
                    
                    PlayerAngles[k++]= Math.atan2(PlayerYPos, PlayerXPos);
                    
                }
            }
        }
        
        
        for(int Q=1; Q<4; Q++){
            for(int i=0; i<Mirror_OnX.intValue(); i++){
                for(int j=0; j<Mirror_OnY.intValue(); j++){
                    if(Q == 1){
                        TrainerPositions[Q][i][j][0]= TrainerPositions[0][i][j][0] * -1;
                        TrainerPositions[Q][i][j][1]= TrainerPositions[0][i][j][1];
                        
                        PlayerPositions[Q][i][j][0]= TrainerPositions[0][i][j][0] * -1;
                        PlayerPositions[Q][i][j][1]= TrainerPositions[0][i][j][1];
                        PlayerAngles[k++]= Math.atan2(PlayerYPos, PlayerXPos);
                    }
                    else if(Q == 2){
                        TrainerPositions[Q][i][j][0]= TrainerPositions[0][i][j][0] * -1;
                        TrainerPositions[Q][i][j][1]= TrainerPositions[0][i][j][1] * -1;
                        
                        PlayerPositions[Q][i][j][0]= TrainerPositions[0][i][j][0] * -1;
                        PlayerPositions[Q][i][j][1]= TrainerPositions[0][i][j][1] * -1;
                        PlayerAngles[k++]= Math.atan2(PlayerYPos, PlayerXPos);
                    }
                    else{
                        TrainerPositions[Q][i][j][0]= TrainerPositions[0][i][j][0] ;
                        TrainerPositions[Q][i][j][1]= TrainerPositions[0][i][j][1] * -1;
                        
                        PlayerPositions[Q][i][j][0]= TrainerPositions[0][i][j][0] ;
                        PlayerPositions[Q][i][j][1]= TrainerPositions[0][i][j][1] * -1;
                        PlayerAngles[k++]= Math.atan2(PlayerYPos, PlayerXPos);
                    }
                }
            }
        }
         
        int CountDirections= 0;
        double CheckDist;
        double x;
        double y;
        
         for(int Q=0; Q<4; Q++){
            for(int i=0; i<Mirror_OnX.intValue(); i++){
                for(int j=0; j<Mirror_OnY.intValue(); j++){
                    CheckDist= Math.sqrt( Math.pow(TrainerPositions[Q][i][j][0] - your_position[0], 2) + Math.pow(TrainerPositions[Q][i][j][1] - your_position[1], 2) );
                    x= TrainerPositions[Q][i][j][0];
                    y= TrainerPositions[Q][i][j][1];
                    double Player_X=your_position[0];
                    double Player_Y= your_position[1];
                    
                    if(Q==0 && i==0 && j==0 ){
                        CheckDist= Math.sqrt( Math.pow(TrainerPositions[Q][i][j][0] - your_position[0], 2) + Math.pow(TrainerPositions[Q][i][j][1] - your_position[1], 2) );
                        x= TrainerPositions[0][0][0][0];
                        y= TrainerPositions[0][0][0][1];
                        
                        if(CheckDist <= distance){
                            Angles_Of_Directions[CountDirections++]= Math.atan2(y , x);
                        }
                        
                    }
                    
                    else if(Math.atan2(y, x) == Math.atan2( -1* Player_Y , -1* Player_X ) ){
                        continue;
                    }
                   
                   else if(Math.atan2(y, x) == Math.atan2( -1* Player_Y , Player_X ) ){
                        continue;
                    }
                   else if(Math.atan2(y, x) == Math.atan2( Player_Y , -1* Player_X ) ){
                        continue;
                    }
                    else if(TrainerPositions[Q][i][j][0] != your_position[0] && TrainerPositions[Q][i][j][1] != your_position[1]){
                        if(CheckDist <= distance){
                             if(!AngleIsFound(Math.atan2(y , x), Angles_Of_Directions, CountDirections, PlayerAngles, k)){
                                  Angles_Of_Directions[CountDirections++]= Math.atan2(y , x);
                                  
                              }
                          }
                          
                       }
                }
            }
        }
        
        return CountDirections;
    }
    
}